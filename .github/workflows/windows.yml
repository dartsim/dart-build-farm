# This is a basic workflow to help you get started with Actions

name: Windows

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [main]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      ref:
        description: "Branch/tag/commit"
        required: true
        default: dart7/main
      build_type:
        description: "Build type: {Release, Debug}"
        required: true
        default: "Release"
      build_dartpy:
        description: "Build dartpy: {ON, OFF}"
        required: true
        default: "ON"
  schedule:
    # Runs at 2 UTC every other day
    - cron: "0 2 * * 0/2"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  manual_build:
    if: github.event_name == 'workflow_dispatch'

    # The name of jobs
    name: windows.${{ github.event.inputs.build_type }}

    # The type of runner that the job will run on
    runs-on: windows-2019

    env:
      BUILD_TYPE: ${{ github.event.inputs.build_type }}
      BUILD_DARTPY: ${{ github.event.inputs.build_dartpy }}
      VCPKG_ROOT: "C:/dartsim/vcpkg"
      VCPKG_BUILD_TAG: v2020.11-1-v7.0-2

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          repository: dartsim/dart
          ref: ${{ github.event.inputs.ref }}
      - name: Install Dependencies
        shell: cmd
        run: |
          mkdir -p C:\dartsim
          choco install -y wget
          wget -q https://github.com/dartsim/vcpkg-build/releases/download/%VCPKG_BUILD_TAG%/vcpkg-dartsim-dependencies.zip
          unzip -qq vcpkg-dartsim-dependencies.zip -d C:\dartsim
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U pytest
      - name: Build
        shell: cmd
        run: |
          mkdir build
          cd build
          cmake .. -G "Visual Studio 16 2019" -A x64 -Wno-dev ${{ matrix.toolset }} ^
            -DCMAKE_BUILD_TYPE=%BUILD_TYPE% ^
            -DCMAKE_TOOLCHAIN_FILE="%VCPKG_ROOT%/scripts/buildsystems/vcpkg.cmake" ^
            -DDART_MSVC_DEFAULT_OPTIONS=ON ^
            -DDART_VERBOSE=ON ^
            -DDART_BUILD_DARTPY=OFF ^
            -DBUILD_SHARED_LIBS=${{ matrix.build_shared_libs }}
          cmake --build . --config %BUILD_TYPE% --target ALL_BUILD --parallel
          ctest --rerun-failed --output-on-failure -C %BUILD_TYPE%


  schedule_build:
    if: github.event_name != 'workflow_dispatch'

    # The name of jobs
    name: macos.${{ matrix.build_type }}

    # The type of runner that the job will run on
    runs-on: windows-2019

    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]
        build_dartpy: [ON]
        # build_shared_libs: [ON, OFF]  # TODO(JS): Enable once shared lib build is resolved
        build_shared_libs: [OFF]

    env:
      BUILD_TYPE: ${{ matrix.build_type }}
      BUILD_DARTPY: ${{ matrix.build_dartpy }}
      VCPKG_ROOT: "C:/dartsim/vcpkg"
      VCPKG_BUILD_TAG: v2020.11-1-v7.0-2

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          repository: dartsim/dart
          ref: dart7/main
      - name: Install Dependencies
        shell: cmd
        run: |
          mkdir -p C:\dartsim
          choco install -y wget
          wget -q https://github.com/dartsim/vcpkg-build/releases/download/%VCPKG_BUILD_TAG%/vcpkg-dartsim-dependencies.zip
          unzip -qq vcpkg-dartsim-dependencies.zip -d C:\dartsim
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U pytest
      - name: Build
        shell: cmd
        run: |
          mkdir build
          cd build
          cmake .. -G "Visual Studio 16 2019" -A x64 -Wno-dev ${{ matrix.toolset }} ^
            -DCMAKE_BUILD_TYPE=%BUILD_TYPE% ^
            -DCMAKE_TOOLCHAIN_FILE="%VCPKG_ROOT%/scripts/buildsystems/vcpkg.cmake" ^
            -DDART_MSVC_DEFAULT_OPTIONS=ON ^
            -DDART_VERBOSE=ON ^
            -DDART_BUILD_DARTPY=OFF ^
            -DBUILD_SHARED_LIBS=${{ matrix.build_shared_libs }}
          cmake --build . --config %BUILD_TYPE% --target ALL_BUILD --parallel
          ctest --rerun-failed --output-on-failure -C %BUILD_TYPE%
